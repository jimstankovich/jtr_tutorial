{
  "hash": "480763fca4e2bd6b43b1c348f311cff7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data analysis using R: an introduction\"\nauthor: \"\"\ndate: \"23 June 2024\"\nformat: \n  html:\n    toc: true\n    toc-depth: 2\n    number-sections: true\n    number-depth: 2\n    css: styles.css\neditor: visual\n---\n\n::: {.cell}\n\n:::\n\n\n# About these notes\n\nR is a programming language used by many researchers to analyse data. The aims of these notes are:\n\n-   to give you an understanding of why R is useful for data analysis, and\n-   to encourage you to use R for your research.\n\nIn these notes we look at some data on countries around the world based on free material from [GAPMINDER.ORG](https://www.gapminder.org/data/), CC-BY LICENSE.\n\nSome parts of these notes have been taken from parts of a longer course called [R for Reproducible Scientific Analysis](https://swcarpentry.github.io/r-novice-gapminder/), and I have made some modifications. The course *R for Reproducible Scientific Analysis* is Copyright (c) [The Carpentries](https://carpentries.org/). Here is the [license](https://creativecommons.org/licenses/by/4.0/) governing the use of the course.\n\nHalf-way through writing these notes, I discovered an excellent online book, called [R for Non-Programmers: A Guide for Social Scientists](https://bookdown.org/daniel_dauber_io/r4np_book/). If I had started the notes sooner, I would have copied many more good ideas from this book as well.\n\nTo work through the exercises in these notes, you need two pieces of software installed on your computer:\n\n1.  <span style='color: #D95F02;'>**R**</span>, available [here](https://www.r-project.org/).\n2.  <span style='color: #D95F02;'>**RStudio**</span>, available [here](https://posit.co/download/rstudio-desktop/#download).\n\nPlease make sure that you have the latest versions of these installed. If you have any problems installing these, take a look at the instructions in Chapter 3 of [R for Non-Programmers](https://bookdown.org/daniel_dauber_io/r4np_book/setting-up-r-and-rstudio.html).\n\n# Introduction to R and RStudio\n\n## Why use R and R studio?\n\nResearch is a multi-step process: once you’ve designed an experiment and collected data, the real fun begins with analysis! In this section, we look at some of the fundamentals of the R language as well as some best practices for organizing code for research projects that will make your life easier.\n\nAlthough we could use a spreadsheet in Microsoft Excel or Google sheets to analyze our data, these tools are limited in their flexibility and accessibility. Critically, they also are difficult to share steps which explore and change the raw data, which is key to [“reproducible” research](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003285).\n\nTherefore, these notes will help you begin exploring your data using R and RStudio. The R program is available for Windows, Mac, and Linux operating systems, and is a freely-available where you downloaded it above. To run R, all you need is the R program.\n\nHowever, to make using R easier, we will use the program RStudio, which we also downloaded above. RStudio is a free, open-source, Integrated Development Environment (IDE). It provides a built-in editor, works on all platforms (including on servers) and provides many advantages such as integration with version control and project management.\n\n## Overview\n\nWe will begin with raw data, perform exploratory analyses, and learn how to plot results graphically. This example starts with data from gapminder.org, containing yearly statistics for many countries through time. Can you read the data into R? Can you plot the population for Indonesia? Can you calculate the average income for ASEAN countries? By the end of these lessons you will be able to do things like plot the populations for all of these countries in under a minute!\n\n**Basic layout**\n\nWhen you first open RStudio, you will see three panels:\n\n-   The interactive R console/Terminal (entire left)\n-   Environment/History/Connections (tabbed in upper right)\n-   Files/Plots/Packages/Help/Viewer (tabbed in lower right)\n\n![](images/RStudio_screenshot1.png)\n\nOnce you open files, such as R scripts, an editor panel will also open in the top left.\n\n![](images/RStudio_screenshot2.png)\n\n::: callout-tip\n## R Scripts\n\nAny commands that you write in the R console can be saved to a file to be re-run again. Files containing R code to be ran in this way are called R scripts. R scripts have `.R` at the ends of their names to let you know what they are.\n:::\n\n## Workflow within RStudio\n\nThere are two main ways you can work in RStudio:\n\n1.  Test and play within the interactive R console then copy code into a .R file to run later.\n\n    -   This works well when doing small tests and initially starting off.\n    -   It quickly becomes laborious\n\n2.  Start writing in a .R file and use RStudio’s short cut keys for the Run command to push the current line, selected lines or modified lines to the interactive R console.\n\n    -   This is a great way to start; all your code is saved for later\n    -   You will be able to run the file you create from within RStudio or R's `source` function.\n\n::: callout-tip\n## Tip: Running Segments of Your Code\n\nRStudio offers you several ways to run code from within the editor window. To run the current line, you can\n\n```         \n1. click on the Run button above the editor panel, or\n2. select “Run Lines” from the “Code” menu, or\n3. hit Ctrl+Return in Windows or Linux or ⌘+Return on OS X. \n```\n\nTo run several lines of code (instead of just one), select the lines first and then use one of these 3 methods.\n:::\n\n## Introduction to R\n\nMuch of your time in R will be spent in the R interactive console. This is where you will run all of your code, and can be a useful environment to try out ideas before adding them to an R script file.\n\nThe first thing you will see in the R interactive session is a bunch of information, followed by a “\\>” and a blinking cursor. Here you type in commands, R tries to execute them, and then returns a result.\n\n## Using R as a calculator\n\nThis is the simplest thing you can do with R.\n\nIf you type\n\n`1 + 100`\n\nin the console and press return, it shows the answer (101) with `[1]` in front of it:\n\n`[1] 101`\n\nWe'll discuss the `[1]` later.\n\nIf you type an incomplete command, like\n\n`3 -` (instead of `3 - 2` )\n\nand press return, R will show a\n\n`+`\n\nto indicate that it is expecting something else. If you want to cancel a command you can hit Esc and RStudio will give you back the `>` prompt.\n\nFrom now on in these notes, we'll show R commands and the results they give like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 100\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 101\n```\n\n\n:::\n:::\n\n\nwith the R commands in a grey box and the results in a pale purple box. You can copy the R commands by hovering on the right edge of the grey box and clicking on the clipboard. Don't just read the commands... copy and paste them into RStudio, run them for yourself, try changing them, and see what happens!\n\nWhen using R was a calculator, the order of operations is the same as you learned in school. Things are executed in this order:\n\n-   Brackets `(`, `)`\n-   Raise one number to the power of another number: `^` or `**` (can use either symbol)\n-   Multiply `*` and divide `/`\n-   Add `+` and subtract `-`\n\nFor example, compare the difference between\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 + 5 * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 13\n```\n\n\n:::\n:::\n\n\nand\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(3 + 5) * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 16\n```\n\n\n:::\n:::\n\n\nLarge and small numbers, for example the population of China in 2022 (1.43 billion), are written in scientific notation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1430000000\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 1.43e+09\n```\n\n\n:::\n:::\n\n\n`e+09` is another way of writing for \"multiplied by 10 to the power 9\" (or `*10^9`), and 10 to the power 9 is one billion\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1.43 * 10^9\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 1.43e+09\n```\n\n\n:::\n:::\n\n\n## Functions\n\nR can also do other things you can do with a calculator. For example, to calculate the square-root of 36, type\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(36)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 6\n```\n\n\n:::\n:::\n\n\nThe command `sqrt` is known as a <span style='color: #D95F02;'>**function**</span>. R has many built in functions: some do maths like `sqrt`, and some do other things. To call a function, type its name, followed by opening and closing brackets. Some functions take <span style='color: #D95F02;'>**arguments**</span> as inputs (things typed inside the brackets). For example `sqrt` takes a single number as an argument (36 in the example above), and calculates its square root.\n\nSome functions don't take any arguments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetRversion() # Check what version of R you are using\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] '4.4.1'\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd() # Check which folder any files will be written in if you decide to save something\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] \"/Users/jimstankovich/Documents/GitHub/jtr_tutorial/introduction_to_R\"\n```\n\n\n:::\n:::\n\n\n(Here we have added *comments* to help explain our R commands. Anything on a line after a `#` is ignored by R, so it is a good place to write comments.)\n\nOther functions take different types of arguments, for example\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste0(1,\" dog\",\" and \",\"1\",\"2\", \" cats\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] \"1 dog and 12 cats\"\n```\n\n\n:::\n:::\n\n\nThis example shows that R works with text as well as numbers.\n\nDon’t worry about trying to remember every function in R. You can look them up on Google, or if you can remember the start of the function’s name, type it and RStudio will provide some suggestions for the end of the name. For example, if you type `sq`, RStudio will list various functions starting with \"sq\", including `sqrt()`.\n\nTyping a ? before the name of a command will open the *help page* for the command on the bottom right. The help page includes a detailed description of the command and how it works. The bottom of the help page will usually has examples of how to use the command. (This is often the most useful part of the help page!)\n\n## Objects: giving names to pieces of information\n\nA key concept in R, and in any programming language, is to give names to pieces of data. You can give names to single numbers, a bit like `x`'s and `y`'s in algebra you did in high school, or to huge tables of data. Any name (like `x` or `y`) with something assigned to it is called an `r(em2(\"object\"))`.\n\nThe `->` symbol is used to assign some data to an object. For example, the command\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 9\n```\n:::\n\n\ncreates an object called `x`, and sets `x` equal to 9.\n\nTo check what value an object has, just type the name of the object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 9\n```\n\n\n:::\n:::\n\n\nOnce `x` has been assigned a value, we can use it for calculations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 12\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nx^2 + 2*x + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 100\n```\n\n\n:::\n\n```{.r .cell-code}\n(x+1)^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 100\n```\n\n\n:::\n:::\n\n\nYou can also assign a new value to `x`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 42\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 42\n```\n\n\n:::\n:::\n\n\nNote that the command `x <- 42` changes the value of `x`, but it doesn't show us what the new value of `x` is. The `x` on the line below asks R to show us the value of `x`.\n\nYou can also change the value of `x` based on what its previous value was:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- x + 1\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 43\n```\n\n\n:::\n:::\n\n\nTo interpret the command `x <- x + 1`, start on the right. `x + 1` means take the current value of `x` (42) and add 1 to it (43). The arrow pointing to the left says: take the new value you calculated on the right (43) and assign it to the thing on the left (`x`).\n\nIf you prefer, you can use longer names for objects that are more informative than `x`, such as\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_of_thailand_2022 <- 71.7 * 10^6\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthailandPop22 <- 71.7 * 10^6\n```\n:::\n\n\nThese names can only include letters, numbers, `_`, and `.`, and names must start with a letter. So the following names are invalid:\n\n-   `22pop` (cannot start with numbers)\n-   `thailand pop` (cannot have spaces)\n-   `pop-22` (cannot have a `-`)\n\nIf you use long names, you don't have to type them in full every time. Once RStudio knows that you have created an object called `population_of_thailand_2022`, it will suggest the full name after you type the first few characters.\n\n::: {.callout-caution appearance=\"minimal\"}\n## Exercise\n\nWhat are the values of `mass` and `age` after the following commands are run?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmass <- 47.5\nage <- 122\nmass <- mass * 2.3\nage <- age - 20\n```\n:::\n\n:::\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Click to see the solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmass <- 47.5\n```\n:::\n\n\nThis gives the object `mass` a value of 47.5.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- 122\n```\n:::\n\n\nThis gives the object `mass` a value of 122.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmass <- mass * 2.3\n```\n:::\n\n\nThis takes the existing value of `mass` (47.5) and multiplies it by 2.3 to give it a new value of 109.25.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- age - 20\n```\n:::\n\n\nThis will subtract 20 from the existing value of 122 to give `age` a new value of 102.\n:::\n\nObjects can store other types of information, not just numbers. For example, they can store text:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname_of_country <- \"Thailand\"\n```\n:::\n\n\nObjects can also store more than one piece of information, not just a single number or a single piece of text. Two of the most important types of objects in R with multiple pieces of information are <span style='color: #D95F02;'>**vectors**</span> and <span style='color: #D95F02;'>**data.frames**</span>.\n\n## Vectors\n\nA <span style='color: #D95F02;'>**vector**</span> is an object containing a list of things, where everything in list has the same basic data type. For example, everything in the vector can be a piece of text, or everything can be a number.\n\nWe can create vectors by using the R function `c()`, which \"combines\" or \"concatenates\" pieces of information. For example, here is a command to create a vector with 10 pieces of information: the names of the 10 ASEAN countries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_countries <- c(\"Brunei\",\"Cambodia\",\"Indonesia\",\n                     \"Lao\",\"Myanmar\",\"Malaysia\",\"Philippines\",\n                     \"Singapore\",\"Thailand\",\"Vietnam\")\nASEAN_countries\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n [1] \"Brunei\"      \"Cambodia\"    \"Indonesia\"   \"Lao\"         \"Myanmar\"    \n [6] \"Malaysia\"    \"Philippines\" \"Singapore\"   \"Thailand\"    \"Vietnam\"    \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers_less_than_10 <- c(1,2,3,4,5,6,7,8,9)\nnumbers_less_than_10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 1 2 3 4 5 6 7 8 9\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclaims_made_by_Australian_politician <- c(F,F,F,T,F)\nclaims_made_by_Australian_politician\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] FALSE FALSE FALSE  TRUE FALSE\n```\n\n\n:::\n:::\n\n\nNote that you can use F and T as abbreviations for FALSE and TRUE.\n\nR has special notation (`:`) to make lists of consecutive numbers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers_less_than_10 <- 1:9\nnumbers_less_than_10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 1 2 3 4 5 6 7 8 9\n```\n\n\n:::\n:::\n\n\nNote the `[6]` in the vector `ASEAN_countries`. This indicates that `\"Malaysia\"` is the 6th element of the vector (and the `[1]` indicates that `\"Brunei\"` is the 1st element of the vector). We can use square brackets to refer to individual elements of vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_countries[6]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] \"Malaysia\"\n```\n\n\n:::\n\n```{.r .cell-code}\nASEAN_countries[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] \"Indonesia\"\n```\n\n\n:::\n:::\n\n\nor subsets of vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries_sharing_borders_with_Thailand <- ASEAN_countries[c(2,4:6)]\ncountries_sharing_borders_with_Thailand\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] \"Cambodia\" \"Lao\"      \"Myanmar\"  \"Malaysia\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncountries_on_Mekong_River <- ASEAN_countries[c(2,4,5,9,10)]\ncountries_on_Mekong_River\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] \"Cambodia\" \"Lao\"      \"Myanmar\"  \"Thailand\" \"Vietnam\" \n```\n\n\n:::\n:::\n\n\nSome numerical operations can be applied to vectors of numbers, just as they are applied to individual numbers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers_less_than_10 + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1]  4  5  6  7  8  9 10 11 12\n```\n\n\n:::\n\n```{.r .cell-code}\neven_numbers <- numbers_less_than_10 * 2\neven_numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1]  2  4  6  8 10 12 14 16 18\n```\n\n\n:::\n\n```{.r .cell-code}\nsquare_numbers <- numbers_less_than_10 * numbers_less_than_10\nsquare_numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1]  1  4  9 16 25 36 49 64 81\n```\n\n\n:::\n:::\n\n\n## Joining vectors of the same length to make a `data.frame`\n\nIf we have 2 or more vectors of the same length, we can join them to make a table of data with multiple columns, one vector in each column, like something you might enter into a spreadsheet. In R, a table of data is called a <span style='color: #D95F02;'>**data.frame**</span>. To make a `data.frame`, lets combine our vector `ASEAN_countries` with a vector of [national dishes](https://aseanzone.wordpress.com/cultural/136-2/):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnational_dish <- c(\"ambuyat\", \"amok\", \"gado-gado\", \"chicken soup\", \"lahpet\", \"nasi lemak\", \"adobo\", \"laksa\", \"tom yum goong\", \"nem\")\nnational_dish\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n [1] \"ambuyat\"       \"amok\"          \"gado-gado\"     \"chicken soup\" \n [5] \"lahpet\"        \"nasi lemak\"    \"adobo\"         \"laksa\"        \n [9] \"tom yum goong\" \"nem\"          \n```\n\n\n:::\n:::\n\n\nWe can double-check that the two vectors `ASEAN_countries` and `national_dish` have the same length, using a function called `length()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(ASEAN_countries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(national_dish)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 10\n```\n\n\n:::\n:::\n\n\nand join the vectors together to make a `data.frame`, which we'll call `ASEAN_info`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_info <- data.frame(ASEAN_countries, national_dish)\nASEAN_info\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n   ASEAN_countries national_dish\n1           Brunei       ambuyat\n2         Cambodia          amok\n3        Indonesia     gado-gado\n4              Lao  chicken soup\n5          Myanmar        lahpet\n6         Malaysia    nasi lemak\n7      Philippines         adobo\n8        Singapore         laksa\n9         Thailand tom yum goong\n10         Vietnam           nem\n```\n\n\n:::\n:::\n\n\nI would prefer to call the first column (or vector) `country` instead of `ASEAN_countries`. So let's change the name of this column using R's `colnames()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(ASEAN_info)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] \"ASEAN_countries\" \"national_dish\"  \n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(ASEAN_info)[1] <- \"country\"\nASEAN_info\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n       country national_dish\n1       Brunei       ambuyat\n2     Cambodia          amok\n3    Indonesia     gado-gado\n4          Lao  chicken soup\n5      Myanmar        lahpet\n6     Malaysia    nasi lemak\n7  Philippines         adobo\n8    Singapore         laksa\n9     Thailand tom yum goong\n10     Vietnam           nem\n```\n\n\n:::\n:::\n\n\nWe can select individual vectors in our data.frame by writing the vector's name after the name of the data.frame, separated by `$`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_info$country\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n [1] \"Brunei\"      \"Cambodia\"    \"Indonesia\"   \"Lao\"         \"Myanmar\"    \n [6] \"Malaysia\"    \"Philippines\" \"Singapore\"   \"Thailand\"    \"Vietnam\"    \n```\n\n\n:::\n\n```{.r .cell-code}\nASEAN_info$national_dish\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n [1] \"ambuyat\"       \"amok\"          \"gado-gado\"     \"chicken soup\" \n [5] \"lahpet\"        \"nasi lemak\"    \"adobo\"         \"laksa\"        \n [9] \"tom yum goong\" \"nem\"          \n```\n\n\n:::\n:::\n\n\n## Checking whether statements are TRUE or FALSE\n\nR can check whether particular statements are TRUE or FALSE. This is very useful for selecting rows of large data.frames meeting particular conditions.\n\nFor example, we can check whether\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 > 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(49) < 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] FALSE\n```\n\n\n:::\n:::\n\n\nAs well as the comparisons \"greater than\" (`>`) and \"less than\" (`<`), we can also make the comparisons\n\n-   `>=` (greater than or equal to)\n-   `<=` (less than or equal to)\n-   `==` (equal to)\n-   `!=` (not equal to)\n\nThese comparisons can be applied to vectors as well as individual variables. The comparisons `==` (equal to) and `!=` (not equal to) can also be applied to text as well as numbers.\n\nFor example\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- ASEAN_countries != \"Singapore\"\nz <- ASEAN_countries == \"Vietnam\"\ndata.frame(ASEAN_info, y, z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n       country national_dish     y     z\n1       Brunei       ambuyat  TRUE FALSE\n2     Cambodia          amok  TRUE FALSE\n3    Indonesia     gado-gado  TRUE FALSE\n4          Lao  chicken soup  TRUE FALSE\n5      Myanmar        lahpet  TRUE FALSE\n6     Malaysia    nasi lemak  TRUE FALSE\n7  Philippines         adobo  TRUE FALSE\n8    Singapore         laksa FALSE FALSE\n9     Thailand tom yum goong  TRUE FALSE\n10     Vietnam           nem  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nover50 <- square_numbers > 50\ndata.frame(square_numbers, over50)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n  square_numbers over50\n1              1  FALSE\n2              4  FALSE\n3              9  FALSE\n4             16  FALSE\n5             25  FALSE\n6             36  FALSE\n7             49  FALSE\n8             64   TRUE\n9             81   TRUE\n```\n\n\n:::\n:::\n\n\nAnother useful option of checking whether something is TRUE or FALSE is to use the operator `%in%`. You can use this to check whether a particular value is in a vector, or which elements of one vector are in another vector. For example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"Brunei\" %in% ASEAN_countries\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n\"East Timor\" %in% ASEAN_countries\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nis_square_number <- numbers_less_than_10 %in% square_numbers\ndata.frame(numbers_less_than_10, is_square_number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n  numbers_less_than_10 is_square_number\n1                    1             TRUE\n2                    2            FALSE\n3                    3            FALSE\n4                    4             TRUE\n5                    5            FALSE\n6                    6            FALSE\n7                    7            FALSE\n8                    8            FALSE\n9                    9             TRUE\n```\n\n\n:::\n:::\n\n\nWe can use `%in%` to add a column to our `ASEAN_info` data.frame, showing which ASEAN countries the Mekong River runs through:\n\n\n::: {.cell}\n\n```{.r .cell-code}\non_Mekong_River <- ASEAN_countries %in% countries_on_Mekong_River\nASEAN_info <- data.frame(ASEAN_info, on_Mekong_River)\nASEAN_info\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n       country national_dish on_Mekong_River\n1       Brunei       ambuyat           FALSE\n2     Cambodia          amok            TRUE\n3    Indonesia     gado-gado           FALSE\n4          Lao  chicken soup            TRUE\n5      Myanmar        lahpet            TRUE\n6     Malaysia    nasi lemak           FALSE\n7  Philippines         adobo           FALSE\n8    Singapore         laksa           FALSE\n9     Thailand tom yum goong            TRUE\n10     Vietnam           nem            TRUE\n```\n\n\n:::\n:::\n\n\n## R packages\n\nIt is possible to add functions to R by writing a <span style='color: #D95F02;'>**package**</span>, or by obtaining a package written by someone else. Packages are sometimes also called <span style='color: #D95F02;'>**libraries**</span>. There are over 10,000 packages in a public collection called CRAN (the comprehensive R archive network). R and RStudio have functionality for managing packages:\n\n-   You can see what packages are installed by typing `installed.packages()`\n-   You can install packages by typing `install.packages(\"packagename\")`, where `packagename` is the package name, in quotes.\n-   You can update installed packages by typing `update.packages()`\n-   You can remove a package with `remove.packages(\"packagename\")`\n-   You can make a package available for use with `library(packagename)`\n\nPackages can also be viewed, loaded, and detached in the Packages tab of the lower right panel in RStudio. Clicking on this tab will display all of the installed packages with a checkbox next to them. If the box next to a package name is checked, the package is loaded and if it is empty, the package is not loaded. Click an empty box to load that package and click a checked box to detach that package.\n\nPackages can be installed and updated from the Package tab with the Install and Update buttons at the top of the tab.\n\nBelow we will discuss 3 packages with some very useful functions:\n\n-   `dplyr` for working with data.frames and managing data\n-   `readr` for loading datasets into R from spreadsheets\n-   `ggplot2` for making graphs\n\nBut before we can use these packages, we need to install them.\n\n::: {.callout-caution appearance=\"minimal\"}\n## Exercise\n\nInstall the packages `dplyr`, `readr`and `ggplot2`.\n:::\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Click to see the solution\n\nWe can use the `install.packages()` command to install the required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"readr\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"ggplot2\")\n```\n:::\n\n:::\n\n## Loading data with the `readr` package\n\nLet's load a small CSV file with some Gapminder data for 10 ASEAN countries. We will use the package `readr` to do this.\n\nI have put the CSV file on the internet here:\n\n`https://github.com/jimstankovich/stats-and-R/blob/main/asean_data.csv`\n\nThere are two ways you can load the data into R. You can either download it onto your computer first (Method 1), or you can load it into R directly from the website.\n\n### Method 1: Download the data onto your computer, then load it from your computer into R\n\n-   Go to the URL (website) above.\n\n-   Hover on the little arrow pointing down on the right. The words \"Download raw file\" will appear in a black box. ![](images/Github_screenshot.png)\n\n-   Click on this arrow to download the CSV file.\n\n-   Find where the file was downloaded on your computer, and move it to a folder where you want to keep it.\n\n-   In the \"Files\" window of RStudio (bottom right), navigate to the folder where you put the data, select the file, and choose \"Import Dataset...\" ![](images/find_the_data_in_RStudio.png)\n\n-   A new window appears, giving you some options to control how you open the file. In this case the default settings are fine... you don't need to change anything. So just click \"Import\" on the bottom right to load the data. Note that the 3 R commands which will be run appear in a box on the bottom right. ![](images/data_loading_options.png)\n\n-   These 3 commands run in the Console window on the bottom left. The folder in the second line will be different on your computer (not the same as `~/Documents/Research Methodology in Social Sciences/introduction_to_R/data/`), depending on where you put the file `asean_2022_data.csv`.\n\n-   Copy these 3 commands to your .R file so you can run them automatically next time, without having to open windows and click in them. This makes your analysis more \"reproducible\".\n\nLet's have a look at the 3 commands and what they do:\n\n1.  `library(readr)`: The `library()` function makes the package `readr` available for use (as discussed in Section 2.8 above).\n\n2.  `asean_data <- read_csv(\"[path_to_folder]/asean_data.csv\")`: The function `read_csv` is part of the `readr` package. Here it reads the CSV file `asean_data.csv` into R's memory and gives it the name `asean_data`. (We could call it something else if we wanted to.) Some information appears in the Console window about the data. The `country` column has text information (character or \"chr\" for short). The other 4 columns (`year`, `pop`, `lifeExp`, `gdpPercap`) have numerical information (stored as \"double-precision\" numbers, or \"dbl\" for short... don't worry about this computer science terminology if you haven't heard it before).\n\n![](images/description_of_data_that_was_loaded.png)\n\n3.  `View(asean_data)`: This command opens a spreadsheet-style view of the data on the top-left. If you close this window the data is stored in R... it is just a \"view\" of the data.\n\n![](images/data_View.png)\n\nWhen you load the data, `asean_data` also appears in the \"Environment\" window on the top-right. If you click the little blue arrow, it provides some information on the variables in the data:\n\n![](images/environment.png)\n\nIn summary, 3 of the 4 windows in RStudio are showing similar information about the data we have just loaded. :) It is up to you to decide which way(s) of looking at the data are most helpful.\n\n\n::: {.cell}\n\n:::\n\n\nYet another way to look at the data is to type the name of the dataset in the Console window:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasean_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n# A tibble: 20 × 5\n   country      year       pop lifeExp gdpPercap\n   <chr>       <dbl>     <dbl>   <dbl>     <dbl>\n 1 Brunei       2012    407000    74       67800\n 2 Brunei       2022    449000    74.2     58700\n 3 Indonesia    2012 250000000    69.8      9020\n 4 Indonesia    2022 276000000    69.1     12400\n 5 Cambodia     2012  14800000    67.9      3020\n 6 Cambodia     2022  16800000    69.1      4530\n 7 Lao          2012   6510000    66.2      5430\n 8 Lao          2022   7530000    69.8      7950\n 9 Myanmar      2012  50200000    66.1      3190\n10 Myanmar      2022  54200000    70.1      4120\n11 Malaysia     2012  29700000    74.8     21700\n12 Malaysia     2022  33900000    75.5     28300\n13 Philippines  2012  98000000    70.7      6300\n14 Philippines  2022 116000000    72.2      8580\n15 Singapore    2012   5380000    83.3     82900\n16 Singapore    2022   5980000    85.2    108000\n17 Thailand     2012  69200000    77.7     15100\n18 Thailand     2022  71700000    79.1     17500\n19 Vietnam      2012  89300000    73.5      6950\n20 Vietnam      2022  98200000    75       11400\n```\n\n\n:::\n:::\n\n\n### Method 2: Download the data directly into R from the internet\n\nStarting at the same URL as before (`https://github.com/jimstankovich/stats-and-R/blob/main/asean_data.csv`), click on the word \"Raw\" on the top right. This takes you take another webpage with the \"raw\" (unformatted) CSV data. You can use the `read_csv` command to load the data from this webpage:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nasean_data <- read_csv(\"https://raw.githubusercontent.com/jimstankovich/stats-and-R/main/asean_data.csv\")\n```\n:::\n\n\nMethod 2 is fine for the small dataset we are looking at here. However, if you are running your R commands many times and working with a large dataset, it is better to download the dataset onto your computer first (Method 1), rather than downloading a large dataset many times.\n\n## Using the dplyr package to look at the `asean_data`\n\nI use the `dplyr` package more than any other packages. It is very useful for managing datasets: cleaning them, joining them, and extracting smaller sections for statistical analysis.\n\nLet's have a look at how a few `dplyr` functions can be used to work with the `asean_data` we have just loaded.\n\nSuppose we want to know the total population of the 10 ASEAN countries in 2022. We can do this by adding up the values of `pop` in the rows from 2022. Let's do this in 2 steps\n\n1.  Create a smaller dataset that only includes rows with 2022 data.\n2.  Add up the values in the column/vector `pop`.\n\nFor step 1, `dplyr` has a command called `filter()` for selecting particular rows of a dataset. The `filter()` command takes two arguments\n\n-   the name of a data.frame\n-   a condition to satisfy: only include rows where this condition is TRUE\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nasean_2022 <- filter(asean_data, year == 2022)\nasean_2022\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n# A tibble: 10 × 5\n   country      year       pop lifeExp gdpPercap\n   <chr>       <dbl>     <dbl>   <dbl>     <dbl>\n 1 Brunei       2022    449000    74.2     58700\n 2 Indonesia    2022 276000000    69.1     12400\n 3 Cambodia     2022  16800000    69.1      4530\n 4 Lao          2022   7530000    69.8      7950\n 5 Myanmar      2022  54200000    70.1      4120\n 6 Malaysia     2022  33900000    75.5     28300\n 7 Philippines  2022 116000000    72.2      8580\n 8 Singapore    2022   5980000    85.2    108000\n 9 Thailand     2022  71700000    79.1     17500\n10 Vietnam      2022  98200000    75       11400\n```\n\n\n:::\n:::\n\n\nLot's of `dplyr` functions take the name of the data.frame as the first argument. There is an alternative notation for running these functions, where you put the name of the data.frame before the function, then join it to the function using the symbol `%>%`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nasean_2022 <- asean_data %>%\n  filter(year == 2022)\nasean_2022\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n# A tibble: 10 × 5\n   country      year       pop lifeExp gdpPercap\n   <chr>       <dbl>     <dbl>   <dbl>     <dbl>\n 1 Brunei       2022    449000    74.2     58700\n 2 Indonesia    2022 276000000    69.1     12400\n 3 Cambodia     2022  16800000    69.1      4530\n 4 Lao          2022   7530000    69.8      7950\n 5 Myanmar      2022  54200000    70.1      4120\n 6 Malaysia     2022  33900000    75.5     28300\n 7 Philippines  2022 116000000    72.2      8580\n 8 Singapore    2022   5980000    85.2    108000\n 9 Thailand     2022  71700000    79.1     17500\n10 Vietnam      2022  98200000    75       11400\n```\n\n\n:::\n:::\n\n\nI think this notation makes it clearer that we are starting with the `asean_data` data.frame, then applying the `filter()` function to make changes to it and produce `asean_2022`.\n\nThe `%>%` notation is particularly good when you want to apply several functions to a data.frame. Below are two pieces of code that do the same thing... which do you think is easier to read?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlarge_wealthy_country <- \n  filter(filter(filter(asean_data, year == 2022), \n         gdpPercap > 20000), pop > 10e6)  # 10e6 is 10 million \nlarge_wealthy_country\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n# A tibble: 1 × 5\n  country   year      pop lifeExp gdpPercap\n  <chr>    <dbl>    <dbl>   <dbl>     <dbl>\n1 Malaysia  2022 33900000    75.5     28300\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlarge_wealthy_country <- asean_data %>%\n  filter(year == 2022) %>%\n  filter(gdpPercap > 20000) %>%\n  filter(pop > 10e6)  # 10e6 is 10 million\nlarge_wealthy_country\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n# A tibble: 1 × 5\n  country   year      pop lifeExp gdpPercap\n  <chr>    <dbl>    <dbl>   <dbl>     <dbl>\n1 Malaysia  2022 33900000    75.5     28300\n```\n\n\n:::\n:::\n\n\nNow we can use the `sum()` function to add up the values of `pop` in `asean_2022`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasean_pop_2022 <- sum(asean_2022$pop)\nasean_pop_2022\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 680759000\n```\n\n\n:::\n:::\n\n\nSo the total population of the ASEAN countries in 2022 was nearly 681 million. The function `sum()` is part of \"base R\"... you don't need to load `dplyr` to use it.\n\nSuppose we want to calculate the average GDP (Gross Domestic Product) per person, averaged across all 681 million people living in ASEAN countries. (If you are interested, the GDP figures in this dataset are in 2017 (inflation-adjusted) US dollars at [purchasing power parity](https://en.wikipedia.org/wiki/Purchasing_power_parity))\n\nHere are the steps for calculating average GDP:\n\n-   calculate the total GDP for each country\n-   add up total GDP across countries\n-   divide total ASEAN GDP by the ASEAN population\n\nTotal GDP for each country is equal to the country's population multiplied by GDP per person (per capita). Let's add a `total_gdp` column to the `asean_2022` data.frame using a `dplyr` command called `mutate()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasean_2022 <- asean_2022 %>%\n  mutate(gdp = pop * gdpPercap)\nasean_2022\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n# A tibble: 10 × 6\n   country      year       pop lifeExp gdpPercap           gdp\n   <chr>       <dbl>     <dbl>   <dbl>     <dbl>         <dbl>\n 1 Brunei       2022    449000    74.2     58700   26356300000\n 2 Indonesia    2022 276000000    69.1     12400 3422400000000\n 3 Cambodia     2022  16800000    69.1      4530   76104000000\n 4 Lao          2022   7530000    69.8      7950   59863500000\n 5 Myanmar      2022  54200000    70.1      4120  223304000000\n 6 Malaysia     2022  33900000    75.5     28300  959370000000\n 7 Philippines  2022 116000000    72.2      8580  995280000000\n 8 Singapore    2022   5980000    85.2    108000  645840000000\n 9 Thailand     2022  71700000    79.1     17500 1254750000000\n10 Vietnam      2022  98200000    75       11400 1119480000000\n```\n\n\n:::\n:::\n\n\nThen we can add up `total_gdp` across countries using the `sum()` function again:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasean_gdp_2022 = sum(asean_2022$gdp)\nasean_gdp_2022\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 8.782748e+12\n```\n\n\n:::\n:::\n\n\nand calculate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasean_gdp_per_capita_2022 <- asean_gdp_2022 / asean_pop_2022\nasean_gdp_per_capita_2022\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n[1] 12901.41\n```\n\n\n:::\n:::\n\n\nHere is some `dplyr` code that starts with our original CSV file (`asean_data`), and generates a summary of the 2022 population and GDP statistics for the whole of ASEAN.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasean_2022_summary <- asean_data %>%\n  filter(year == 2022) %>%\n  mutate(gdp = pop * gdpPercap) %>%\n  summarise(\n    pop = sum(pop),\n    total_gdp = sum(gdp),\n    gdpPercap = total_gdp / pop)\nasean_2022_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n# A tibble: 1 × 3\n        pop     total_gdp gdpPercap\n      <dbl>         <dbl>     <dbl>\n1 680759000 8782747800000    12901.\n```\n\n\n:::\n:::\n\n\nIt uses `filter()` and `mutate()` in the same way we've seen before. There is also a new command `summarise()`.\n\nIf we wanted these statistics for both 2012 and 2022, we could remove the `filter()` function, keep data for both year, and instead apply another function `group_by()` before `summarise()`, to generate summaries for both years at the same time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasean_gdp_summary <- asean_data %>%\n  mutate(gdp = pop * gdpPercap) %>%\n  group_by(year) %>%\n  summarise(\n    pop = sum(pop),\n    total_gdp = sum(gdp),\n    gdpPercap = total_gdp / pop)\nasean_gdp_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n# A tibble: 2 × 4\n   year       pop     total_gdp gdpPercap\n  <dbl>     <dbl>         <dbl>     <dbl>\n1  2012 613497000 5896224900000     9611.\n2  2022 680759000 8782747800000    12901.\n```\n\n\n:::\n:::\n\n\nI don't think the `total_gdp` column is very useful... trillions of dollars seem to big to understand. We can select columns to keep using another `dplyr` command, `select()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasean_gdp_summary %>%\n  select(year, pop, gdpPercap)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n# A tibble: 2 × 3\n   year       pop gdpPercap\n  <dbl>     <dbl>     <dbl>\n1  2012 613497000     9611.\n2  2022 680759000    12901.\n```\n\n\n:::\n:::\n\n\nOr we can exclude particular columns by putting a `-` in front of their names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasean_gdp_summary %>%\n  select(-total_gdp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n# A tibble: 2 × 3\n   year       pop gdpPercap\n  <dbl>     <dbl>     <dbl>\n1  2012 613497000     9611.\n2  2022 680759000    12901.\n```\n\n\n:::\n:::\n\n\nMaybe you're more interested in health than money. If so, you could modify these calculations to calculate average life expectancy across ASEAN countries instead of per capita GDP. All that you need to change is, instead of multiplying per capita GDP by population, multiply life expectancy by population to give \"life expectancy times population\", or \"letp\" for short.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasean_lifeExp <- asean_data %>%\n  mutate(letp = pop * lifeExp) %>%\n  group_by(year) %>%\n  summarise(\n    pop = sum(pop),\n    letp = sum(letp),\n    lifeExp = letp / pop) %>%\n  select(-letp)\nasean_lifeExp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output\n# A tibble: 2 × 3\n   year       pop lifeExp\n  <dbl>     <dbl>   <dbl>\n1  2012 613497000    71.3\n2  2022 680759000    72.1\n```\n\n\n:::\n:::\n\n\n## Plotting data with the `ggplot2` package\n\nI have to confess: I find this package hard to use...\n\n### Bar graphs\n\nhttps://r-graph-gallery.com/218-basic-barplots-with-ggplot2.html\n\nhttp://www.sthda.com/english/wiki/ggplot2-title-main-axis-and-legend-titles\n\nhttps://stackoverflow.com/questions/15629192/making-a-bar-chart-in-ggplot-with-vertical-labels-in-x-axis\n\nhttps://www.r-bloggers.com/2021/09/adding-text-labels-to-ggplot2-bar-chart/\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(asean_2022, aes(x=country, y=lifeExp)) +\n  geom_bar(fill = \"dodgerblue3\", stat = \"identity\") +\n  ylab(\"Life expectancy at birth (2022)\") +\n  geom_text(aes(label = lifeExp, vjust = 1.2)) + \n  theme_light() + \n  theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))\n```\n\n::: {.cell-output-display}\n![](Introduction_to_R_files/figure-html/unnamed-chunk-58-1.png){width=672}\n:::\n:::\n\n\nhttps://rpubs.com/dvdunne/ggplot_two_bars\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(asean_data, aes(x=country, y=lifeExp, fill=year)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  ylab(\"Life expectancy at birth\") +\n  theme_light() + \n  theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))\n```\n\n::: {.cell-output-display}\n![](Introduction_to_R_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n:::\n\n\nThis is not what we want! Need to convert year to a categorical variable (called a factor in R)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasean_data <- asean_data %>%\n  mutate(year = as.factor(year))\nggplot(asean_data, aes(x=country, y=lifeExp, fill=year)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  ylab(\"Life expectancy at birth\") +\n  theme_light() + \n  theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))\n```\n\n::: {.cell-output-display}\n![](Introduction_to_R_files/figure-html/unnamed-chunk-60-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlife_exp_table <- asean_data %>%\n  arrange(year) %>%\n  group_by(country) %>%\n  summarise(\n    le2012 = first(lifeExp),\n    le2022 = last(lifeExp),\n    le_change = le2022 - le2012)\n```\n:::\n\n\nhttps://ggplot2.tidyverse.org/reference/lims.html\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(life_exp_table, aes(x=country, y=le_change)) +\n  geom_bar(fill = \"dodgerblue3\", stat = \"identity\") +\n  ylab(\"change in life expectancy (years), 2012 -> 2022\") +\n  geom_text(aes(label = round(le_change,1), vjust = -1)) + \n  theme_light() + \n  theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) +\n  ylim(-1, 4.5)\n```\n\n::: {.cell-output-display}\n![](Introduction_to_R_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n:::\n\n\n### Line graphs showing changes in a variable over time\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbig_gapminder_dataset <- read_csv(\"~/Documents/Research Methodology in Social Sciences/introduction_to_R/data/big_gapminder_dataset.csv\",\n        show_col_types = FALSE)\n\nlifeExp_since_1900 <- big_gapminder_dataset %>% \n  filter(year >= 1900 & year <= 2022) %>%\n  select(country, continent, year, lifeExp) %>%\n  mutate(asean = country %in% ASEAN_countries)\n\nasean_lifexp_since_1900 <- lifeExp_since_1900 %>%\n  filter(asean == TRUE)\n\nother_countries <- lifeExp_since_1900 %>%\n  filter(asean == FALSE)\n\n# Palette good for people who are colour-blind\n# https://stackoverflow.com/questions/9563711/r-color-palettes-for-many-data-classes\ncolours1 <- c(\"#88CCEE\", \"#CC6677\", \"#DDCC77\", \"#117733\",\n             \"#332288\", \"#AA4499\", \"#44AA99\", \"#999933\",\n             \"#882255\", \"#661100\")\n\n# Another palette from top of the same chat\ncolours2 <- c(\n  \"dodgerblue2\", \"#E31A1C\", # red\n  \"green4\",\n  \"#6A3D9A\", # purple\n  \"#FF7F00\", # orange\n  \"black\", \"gold1\",\n  \"skyblue2\", \"#FB9A99\", # lt pink\n  \"palegreen2\")\n\n\nggplot(data = asean_lifexp_since_1900, mapping = aes(x=year, y=lifeExp, group=country, color=country)) +\n  geom_line() +\n  scale_color_manual(values = colours2) + \n  ylab(\"Life expectancy at birth\")\n```\n\n::: {.cell-output-display}\n![](Introduction_to_R_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# https://stackoverflow.com/questions/40297206/overlaying-two-plots-using-ggplot2-in-r\nggplot(data = other_countries, \n       mapping = aes(x=year, y=lifeExp, group=country)) +\n  geom_line(col = rgb(0.8,0.8,0.8,0.5)) +\n  geom_line(data = asean_lifexp_since_1900, \n            mapping = aes(x=year, y=lifeExp, group=country,\n                          color=country)) +\n  scale_color_manual(values = colours2) + \n  ylab(\"Life expectancy at birth\")\n```\n\n::: {.cell-output-display}\n![](Introduction_to_R_files/figure-html/unnamed-chunk-63-2.png){width=672}\n:::\n:::\n\n\n### Scatterplots (plot of 2 continuous variables against each other)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasean_2022 %>%\n  ggplot(aes(x=gdpPercap, y=lifeExp)) +\n  geom_point(col = \"dodgerblue\", size = 3) +\n  xlab(\"GDP per capita, 2022 (purchasing power parity, 2017 US dollars)\") +\n  ylab(\"life expectancy at birth, 2022\") +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](Introduction_to_R_files/figure-html/unnamed-chunk-64-1.png){width=672}\n:::\n:::\n\n\n## Scatterplot with different sized symbols\n\n(sometimes called a bubble plot)\n\nhttps://www.datanovia.com/en/blog/how-to-remove-legend-from-a-ggplot/\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasean_2022 %>%\n  ggplot(aes(x=gdpPercap, y=lifeExp, size=pop)) +\n  geom_point(col = \"dodgerblue\", alpha=0.5) +\n  scale_size(range = c(2, 24), name=\"Population\") +\n  scale_x_log10(limits = c(2500, 170000)) +\n  ylim(65,87) + \n  xlab(\"GDP per capita, 2022 (purchasing power parity, 2017 US dollars)\") +\n  ylab(\"life expectancy at birth, 2022\") +\n  geom_text(aes(x=gdpPercap, y=lifeExp, label = country, size = 5*10^6, vjust = -1)) +\n  theme_light() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Introduction_to_R_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n:::\n\n\nMake a rough match of the plot at https://www.gapminder.org/tools/\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbig_gapminder_dataset <- read_csv(\"~/Documents/Research Methodology in Social Sciences/introduction_to_R/data/big_gapminder_dataset.csv\",\n        show_col_types = FALSE)\n\nworld_2022 <- big_gapminder_dataset %>%\n  filter(year == \"2022\") %>%\n  filter(country != \"Monaco\") %>% \n  arrange(desc(pop))\n\nworld_2022 %>%\n  ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, col=continent)) +\n  geom_point(alpha=0.5) +\n  scale_size(range = c(.1, 24), name=\"Population\") +\n  scale_x_continuous(trans='log10') +\n  guides(size = \"none\") + \n  theme_light() +\n  xlab(\"GDP per capita, 2022 (purchasing power parity, 2017 US dollars)\") +\n  ylab(\"life expectancy at birth, 2022\")\n```\n\n::: {.cell-output-display}\n![](Introduction_to_R_files/figure-html/unnamed-chunk-66-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reproduce the hover feature with the plotly package\n# and match the continent colours more closely\n\nlibrary(plotly)\n\ncontinent_colours <- data.frame(\n  continent = c(\"Africa\", \"Americas\", \"Asia\", \"Europe\"),\n  colour = c(\"rgba(95,210,230,1)\", \"rgba(154,231,71,1)\",\n             \"rgba(237,100,117,1)\", \"rgba(251,230,77,1)\")\n)\n\n# Plotly doesn't handle rows with missing data as well as ggplot2\n# Remove these rows explicitly...\nworld_2022v2 <- world_2022 %>%\n  filter(!is.na(lifeExp) & !is.na(gdpPercap) & !is.na(pop)) %>%\n  left_join(continent_colours)\n\n#https://plotly.com/r/bubble-charts/\nfig <- plot_ly(world_2022v2, x = ~gdpPercap, y = ~lifeExp, text = ~country,\n               type = \"scatter\", mode = \"markers\",\n               marker = list(size = ~(sqrt((pop)/300000)+0.2), \n                             opacity = 0.8, color = ~colour))\n#https://plotly.com/r/figure-labels/\nfig <- fig %>% \n  layout(fig, \n         title = \"2022 Gapminder data\",\n         xaxis = list(\n           type = \"log\", \n           title = \"GDP per capita (purchasing power parity, 2017 US dollars)\"),\n         yaxis = list(title = \"life expectancy at birth\"))\n\nfig\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-fddd6d0a4bd8165bbcb2\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-fddd6d0a4bd8165bbcb2\">{\"x\":{\"visdat\":{\"e4bfaab1dba\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"e4bfaab1dba\",\"attrs\":{\"e4bfaab1dba\":{\"x\":{},\"y\":{},\"text\":{},\"mode\":\"markers\",\"marker\":{\"size\":{},\"opacity\":0.80000000000000004,\"color\":{}},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"2022 Gapminder data\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"log\",\"title\":\"GDP per capita (purchasing power parity, 2017 US dollars)\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"life expectancy at birth\"},\"hovermode\":\"closest\",\"showlegend\":false},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[18200,7100,64700,12400,5450,4960,15100,6260,27600,19500,41600,2380,8580,12800,1130,11400,15300,33000,53600,17500,46800,2620,46000,13500,43800,4120,4880,15700,45500,39800,2280,3570,22400,11200,9200,1430,36800,10700,49000,8060,50000,5910,8070,12700,28300,1720,5500,1240,4000,1500,6180,5540,3730,51000,1270,1620,58700,2160,2130,3350,12200,1470,3300,32700.000000000004,25900,26100,10900,9160,1410,58600,1160,3560,4530,2140,2700,2360,3440,708,10600,8200,53200,2800,9320,10600,19300,386,41700,54800,15000,31500,5710,35700,3770,35300,4140,19100,74300,44300,56300,2210,71000,1640,7950,20500,5820,19800,26800,13500,5190,14700,9400,108000,3210,59700,33200,819,49600,13200,67500,1460,5720,44900,22000,114000,5440,35300,33300,49200,34000,17000,1950,24400,12100,12900,16700,15500,10000,16000,39600,2130,97100,15500,9490,13900,2280,42200,1860,17100,32700.000000000004,14700,23500,51900,4090,37800,22800,43600,9130,4990,12000,3250,34400,11300,2250,116000,22100,14900,7690,48200,21000,58700,34200,9700,55000,2790,15100,4010,5120,15000,2000,14400,3260,29800,6040,14600,21500,56000,11500,28800,6120,64500,13500,11100,4590],\"y\":[78.200000000000003,67.599999999999994,78,69.099999999999994,65.5,65.200000000000003,73.900000000000006,75.5,69.200000000000003,76.299999999999997,85.200000000000003,68.599999999999994,72.200000000000003,69.799999999999997,64.5,75,76.200000000000003,79,80.599999999999994,79.099999999999994,81.5,67,83.400000000000006,60.5,83.599999999999994,70.099999999999994,65.599999999999994,77,83.299999999999997,83.5,66.900000000000006,70.200000000000003,75.400000000000006,76.799999999999997,73,62.600000000000001,77.200000000000003,67.900000000000006,82.700000000000003,74,75.099999999999994,64.5,68.799999999999997,77.299999999999997,75.5,66.299999999999997,65.5,56.899999999999999,72,64.799999999999997,74,63.799999999999997,62.700000000000003,83.400000000000006,61.700000000000003,73.5,80.900000000000006,61.399999999999999,61.600000000000001,74.400000000000006,77.900000000000006,63.5,62.200000000000003,73.200000000000003,79.299999999999997,69.799999999999997,77,68.200000000000003,60.100000000000001,82.200000000000003,57.5,67.900000000000006,69.099999999999994,59.100000000000001,60.5,69.400000000000006,64,63.5,75.900000000000006,68.900000000000006,81.900000000000006,63.299999999999997,76.299999999999997,79.200000000000003,73.799999999999997,63.399999999999999,78.299999999999997,83.299999999999997,71.400000000000006,80.299999999999997,69.900000000000006,82.299999999999997,65.099999999999994,75.099999999999994,70,73,73.400000000000006,82.799999999999997,82.700000000000003,65.799999999999997,84.5,61.899999999999999,69.799999999999997,73.099999999999994,76,75.599999999999994,69.900000000000006,73.299999999999997,72.700000000000003,71.200000000000003,74.599999999999994,85.200000000000003,65.799999999999997,81.599999999999994,75.200000000000003,51.799999999999997,82.299999999999997,72,83.299999999999997,66.099999999999994,73,82.200000000000003,78,82.5,69.700000000000003,70.099999999999994,79,82.099999999999994,79.200000000000003,71.5,63.100000000000001,78,68.900000000000006,71.900000000000006,75,76.099999999999994,75,73.700000000000003,74.299999999999997,65.799999999999997,76.799999999999997,62.700000000000003,60,66.900000000000006,50.700000000000003,81.900000000000006,59.899999999999999,71.099999999999994,76.299999999999997,65.5,75.400000000000006,76.299999999999997,71.400000000000006,78.5,74.299999999999997,81.299999999999997,54.200000000000003,66.599999999999994,68.799999999999997,68.299999999999997,64.299999999999997,74,59.5,83.400000000000006,75.700000000000003,70.700000000000003,72.5,83.099999999999994,79.799999999999997,74.200000000000003,76.599999999999994,71.5,84.5,66,76.599999999999994,71.200000000000003,70.900000000000006,72.900000000000006,61.200000000000003,73.799999999999997,64,71.200000000000003,73.400000000000006,69.099999999999994,76.799999999999997,82.700000000000003,71.799999999999997,72.599999999999994,65.900000000000006,82.599999999999994,68.099999999999994,63.899999999999999,68.5],\"text\":[\"China\",\"India\",\"USA\",\"Indonesia\",\"Pakistan\",\"Nigeria\",\"Brazil\",\"Bangladesh\",\"Russia\",\"Mexico\",\"Japan\",\"Ethiopia\",\"Philippines\",\"Egypt\",\"Congo, Dem. Rep.\",\"Vietnam\",\"Iran\",\"Turkey\",\"Germany\",\"Thailand\",\"UK\",\"Tanzania\",\"France\",\"South Africa\",\"Italy\",\"Myanmar\",\"Kenya\",\"Colombia\",\"South Korea\",\"Spain\",\"Uganda\",\"Sudan\",\"Argentina\",\"Algeria\",\"Iraq\",\"Afghanistan\",\"Poland\",\"Ukraine\",\"Canada\",\"Morocco\",\"Saudi Arabia\",\"Angola\",\"Uzbekistan\",\"Peru\",\"Malaysia\",\"Yemen\",\"Ghana\",\"Mozambique\",\"Nepal\",\"Madagascar\",\"Venezuela\",\"Cote d'Ivoire\",\"Cameroon\",\"Australia\",\"Niger\",\"North Korea\",\"Taiwan\",\"Burkina Faso\",\"Mali\",\"Syria\",\"Sri Lanka\",\"Malawi\",\"Zambia\",\"Romania\",\"Chile\",\"Kazakhstan\",\"Ecuador\",\"Guatemala\",\"Chad\",\"Netherlands\",\"Somalia\",\"Senegal\",\"Cambodia\",\"Zimbabwe\",\"Guinea\",\"Rwanda\",\"Benin\",\"Burundi\",\"Tunisia\",\"Bolivia\",\"Belgium\",\"Haiti\",\"Jordan\",\"Cuba\",\"Dominican Republic\",\"South Sudan\",\"Czech Republic\",\"Sweden\",\"Azerbaijan\",\"Greece\",\"Honduras\",\"Portugal\",\"Papua New Guinea\",\"Hungary\",\"Tajikistan\",\"Belarus\",\"UAE\",\"Israel\",\"Austria\",\"Togo\",\"Switzerland\",\"Sierra Leone\",\"Lao\",\"Serbia\",\"Nicaragua\",\"Libya\",\"Bulgaria\",\"Paraguay\",\"Kyrgyz Republic\",\"Turkmenistan\",\"El Salvador\",\"Singapore\",\"Congo, Rep.\",\"Denmark\",\"Slovak Republic\",\"Central African Republic\",\"Finland\",\"Lebanon\",\"Norway\",\"Liberia\",\"Palestine\",\"New Zealand\",\"Costa Rica\",\"Ireland\",\"Mauritania\",\"Oman\",\"Panama\",\"Kuwait\",\"Croatia\",\"Georgia\",\"Eritrea\",\"Uruguay\",\"Mongolia\",\"Moldova\",\"Bosnia and Herzegovina\",\"Albania\",\"Jamaica\",\"Armenia\",\"Lithuania\",\"Gambia\",\"Qatar\",\"Botswana\",\"Namibia\",\"Gabon\",\"Lesotho\",\"Slovenia\",\"Guinea-Bissau\",\"North Macedonia\",\"Latvia\",\"Equatorial Guinea\",\"Trinidad and Tobago\",\"Bahrain\",\"Timor-Leste\",\"Estonia\",\"Mauritius\",\"Cyprus\",\"Eswatini\",\"Djibouti\",\"Fiji\",\"Comoros\",\"Guyana\",\"Bhutan\",\"Solomon Islands\",\"Luxembourg\",\"Montenegro\",\"Suriname\",\"Cape Verde\",\"Malta\",\"Maldives\",\"Brunei\",\"Bahamas\",\"Belize\",\"Iceland\",\"Vanuatu\",\"Barbados\",\"Sao Tome and Principe\",\"Samoa\",\"St. Lucia\",\"Kiribati\",\"Grenada\",\"Micronesia, Fed. Sts.\",\"Seychelles\",\"Tonga\",\"St. Vincent and the Grenadines\",\"Antigua and Barbuda\",\"Andorra\",\"Dominica\",\"St. Kitts and Nevis\",\"Marshall Islands\",\"San Marino\",\"Palau\",\"Nauru\",\"Tuvalu\"],\"mode\":\"markers\",\"marker\":{\"color\":[\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(251,230,77,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(251,230,77,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(154,231,71,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(251,230,77,1)\",\"rgba(154,231,71,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(154,231,71,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(251,230,77,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(154,231,71,1)\",\"rgba(154,231,71,1)\",\"rgba(95,210,230,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(154,231,71,1)\",\"rgba(251,230,77,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(154,231,71,1)\",\"rgba(154,231,71,1)\",\"rgba(95,210,230,1)\",\"rgba(251,230,77,1)\",\"rgba(251,230,77,1)\",\"rgba(251,230,77,1)\",\"rgba(251,230,77,1)\",\"rgba(154,231,71,1)\",\"rgba(251,230,77,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(154,231,71,1)\",\"rgba(95,210,230,1)\",\"rgba(251,230,77,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(251,230,77,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(251,230,77,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\",\"rgba(154,231,71,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(251,230,77,1)\",\"rgba(251,230,77,1)\",\"rgba(154,231,71,1)\",\"rgba(251,230,77,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(251,230,77,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(251,230,77,1)\",\"rgba(95,210,230,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(251,230,77,1)\",\"rgba(154,231,71,1)\",\"rgba(95,210,230,1)\",\"rgba(251,230,77,1)\",\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\",\"rgba(154,231,71,1)\",\"rgba(154,231,71,1)\",\"rgba(251,230,77,1)\",\"rgba(237,100,117,1)\",\"rgba(154,231,71,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(95,210,230,1)\",\"rgba(237,100,117,1)\",\"rgba(154,231,71,1)\",\"rgba(154,231,71,1)\",\"rgba(251,230,77,1)\",\"rgba(154,231,71,1)\",\"rgba(154,231,71,1)\",\"rgba(237,100,117,1)\",\"rgba(251,230,77,1)\",\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\",\"rgba(237,100,117,1)\"],\"size\":[69.241050590693263,68.999224801834316,33.76585566713095,30.531501776206202,28.247578623950172,27.218512172212591,26.970630673681683,24.074672772626645,22.184843263788199,20.855911179772889,20.530600909302539,20.448456731316586,19.8638416050035,19.435384061671343,18.365902124584949,18.292355660149212,17.385265006200321,17.062186493255652,16.873332000533065,15.659624833740306,15.199999999999999,14.976106839534333,14.874240468703425,14.330345596151094,14.223789311975086,13.6412301024373,13.616407864998738,13.352946437965905,13.340268896284682,12.796295751794121,12.743258481484519,12.703332889007367,12.515302134607444,12.43383286900171,12.379217270963407,11.904699910719625,11.732562594670796,11.703622617824932,11.528430311977619,11.380339887498948,11.215141094572203,11.093423092245461,10.939335795724674,10.84581294844754,10.830145812734649,10.798742063723097,10.767244989431571,10.688088481701515,10.282988974836115,10.133109617167559,9.9125348562223099,9.895359714832658,9.8436507609929542,9.5452305125841228,9.5452305125841228,9.5273790530888149,9.1256185593305883,8.8986589004665912,8.879477710861023,8.782928793055822,8.7244745683629468,8.4462112512353205,8.3649658092772601,8.3034971874288122,8.2829037686547604,8.2415587212098789,7.9459666924148342,7.9028133388608959,7.881145747868608,7.859416862050705,7.859416862050705,7.7938571665963448,7.6833147735478828,7.5711147958319938,7.0068592855540457,6.9823299831252683,6.8833125519211409,6.7574385243020005,6.6291005073286371,6.5770421565696635,6.4449979983983985,6.4182527020592097,6.3373175465073226,6.3101009266077872,6.3101009266077872,6.2277137733417085,6.1160797830996163,6.1160797830996163,6.0878405775518978,6.0878405775518978,6.0878405775518978,6.0594652770823156,6.0022983951764033,5.9648359329067935,5.959050847723665,5.8361925682739644,5.8095157247900344,5.6893836933970405,5.6589376255824728,5.6313902456001079,5.5975302994363387,5.5572380943915496,5.2099900199501397,5.1057789051960611,5.0131763593978844,4.9644516998286381,4.9539457296018856,4.9539457296018856,4.9010637094172633,4.8296148147911113,4.7971005354824836,4.664676173400859,4.6609416046390928,4.6271887242357312,4.5358966777357601,4.5127717305695656,4.4972859651955517,4.477849927241488,4.4544094772365295,4.4031734043061643,4.383300132670378,4.3593268686170843,4.355317877932646,4.2906397217713188,4.174921382870358,4.1072582032246947,4.0340579025361629,3.9727090178455766,3.8651512019742569,3.7308167138307629,3.7023801430836527,3.5763886032268268,3.5665016461206931,3.5015148038438357,3.481259920619924,3.2767948691238207,3.2713731999438518,3.2441200151549001,3.2276503540974919,3.205550421026627,3.2000000000000002,3.1608557321603272,3.1268868558020255,3.0225284173355398,2.9748873851023219,2.8583202716502516,2.8520432374554781,2.8394443859772207,2.6832774042918901,2.5593784492248521,2.458317958127243,2.4135943621178657,2.3134489978863146,2.3055482263138343,2.2816659994661328,2.2412414523193154,2.2000000000000002,2.1321835661585919,1.9606816861659009,1.8703293088490065,1.8421530582338135,1.8145174717749779,1.7534906930308058,1.6696938456699069,1.645683229480096,1.6352700094407324,1.6059397805975426,1.5329166015421469,1.5216151734399339,1.4233832869001712,1.3690451944500122,1.3618950038622251,1.3150485789118487,1.244030650891055,1.1695359714832658,1.0698658900466593,1.0602325267042627,0.97459666924148336,0.86080758671996693,0.84549722436790287,0.8164414002968976,0.79721576223896395,0.79721576223896395,0.78878405775518989,0.75916604570258617,0.71575187832910503,0.69227363664260277,0.59874804074753774,0.57237973450050506,0.53516165253998449,0.44562844569254056,0.40575065816014622,0.39407902170679521],\"opacity\":0.80000000000000004,\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"type\":\"scatter\",\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"line\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n",
    "supporting": [
      "Introduction_to_R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}